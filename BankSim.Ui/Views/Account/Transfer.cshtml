@{
    ViewData["Title"] = "Para Transferi";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">
            <div class="card shadow rounded-4 p-4">
                <h3 class="mb-4 fw-bold text-primary text-center">Para Transferi</h3>
                <form id="transferForm" autocomplete="off">
                    <div class="mb-3">
                        <label for="FromAccountId" class="form-label">Gönderen Hesap</label>
                        <select class="form-select" id="FromAccountId" name="FromAccountId" required>
                            <option value="">Hesap Seçin</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="ToAccountIdOrIban" class="form-label">Alıcı Hesap ID veya IBAN</label>
                        <input type="text" class="form-control" id="ToAccountIdOrIban" name="ToAccountIdOrIban" placeholder="ID veya TR..." required maxlength="26" />
                    </div>
                    <div class="mb-3">
                        <label for="Amount" class="form-label">Tutar</label>
                        <input type="number" class="form-control" id="Amount" name="Amount" min="0.01" step="0.01" placeholder="0.00" required />
                    </div>
                    <button type="submit" class="btn btn-success w-100 py-2 fw-bold">Transfer Et</button>
                </form>
                <div id="transferMsg" class="mt-3 text-center"></div>
                <div class="mt-3 text-center">
                    <a href="/Dashboard/Index" class="btn btn-outline-primary w-100 rounded-3">← Ana Sayfa</a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
     
        function getCurrencyWithSymbol(currency) {
            switch ((currency || "").toUpperCase()) {
                case "TL": return "₺ TL";
                case "USD": return "$ USD";
                case "EUR": return "€ EUR";
                default: return currency;
            }
        }

        const API_BASE = window.API_BASE_URL;
        const token = sessionStorage.getItem('token');
        if (!token) window.location.href = "/Login/Index";

        fetch(API_BASE + '/api/account/customer/' + getCustomerIdFromJwt(token), {
            headers: { 'Authorization': 'Bearer ' + token }
        })
        .then(resp => resp.json())
        .then(accounts => {
            const select = document.getElementById('FromAccountId');
            if (!accounts || accounts.length === 0) {
                select.innerHTML = '<option value="">Hesabınız yok</option>';
                return;
            }
            accounts.forEach(h => {
                const currency = h.currency ?? h.Currency;
                const balance = h.balance ?? h.Balance;
                const iban = h.iban ?? h.IBAN;
                const opt = document.createElement('option');
                opt.value = h.id ?? h.Id;
                opt.textContent = `${iban} (${balance} ${getCurrencyWithSymbol(currency)})`;
                select.appendChild(opt);
            });
        });

        function getCustomerIdFromJwt(token) {
            try {
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
                const jwt = JSON.parse(jsonPayload);
                return jwt.nameid || jwt.sub || jwt.id || jwt.customerId;
            } catch { return ""; }
        }

        document.getElementById('transferForm').onsubmit = async function(e) {
            e.preventDefault();
            const fromId = document.getElementById('FromAccountId').value;
            const toInput = document.getElementById('ToAccountIdOrIban').value.trim();
            const amount = parseFloat(document.getElementById('Amount').value);
            const msgDiv = document.getElementById('transferMsg');
            msgDiv.innerHTML = "";

            if (!fromId || !toInput || isNaN(amount) || amount <= 0) {
                msgDiv.innerHTML = `<div class="alert alert-danger">Tüm alanları doldurun ve geçerli bir tutar girin.</div>`;
                return;
            }

            let toAccountId = null;

            if (/^TR[0-9A-Z]{24}$/i.test(toInput)) {
                const ibanResp = await fetch(API_BASE + '/api/account/iban/' + toInput, {
                    headers: { 'Authorization': 'Bearer ' + token }
                });
                if (!ibanResp.ok) {
                    msgDiv.innerHTML = `<div class="alert alert-danger">Alıcı IBAN bulunamadı!</div>`;
                    return;
                }
                const acc = await ibanResp.json();
                toAccountId = acc.id ?? acc.Id;
            } else if (/^\d+$/.test(toInput)) {
             
                toAccountId = toInput;
            } else {
                msgDiv.innerHTML = `<div class="alert alert-danger">Alıcıya ID ya da geçerli IBAN giriniz.</div>`;
                return;
            }

            const transferDto = {
                FromAccountId: fromId,
                ToAccountId: toAccountId,
                Amount: amount
            };

            try {
                const resp = await fetch(API_BASE + '/api/transaction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer ' + token
                    },
                    body: JSON.stringify(transferDto)
                });

                if (resp.ok) {
                    msgDiv.innerHTML = `<div class="alert alert-success">Transfer başarıyla gerçekleştirildi!</div>`;
                    setTimeout(() => window.location.href = "/Account/Index", 1200);
                } else {
                    const err = await resp.text();
                    msgDiv.innerHTML = `<div class="alert alert-danger">Transfer başarısız: ${err || "Hata oluştu."}</div>`;
                }
            } catch (ex) {
                msgDiv.innerHTML = `<div class="alert alert-danger">Ağ veya sunucu hatası.</div>`;
            }
        };
    </script>
}
