@{
    ViewData["Title"] = "Ana Sayfa";
}

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-12 text-start">
            <h2 class="fw-bold" style="color:#003366;">
                Hoş geldin, <span style="color:#0064c9;" id="welcomeName">...</span> 👋
            </h2>
            <p class="fs-5 mb-2">Hesaplarını buradan yönetebilirsin.</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-12 text-end">
            <a href="/Invoice/Index" class="btn btn-warning btn-lg px-4 rounded-3 shadow-sm" style="background:#ffb300; border:none;">
                <i class="bi bi-receipt"></i> Fatura Sorgula / Öde
            </a>
        </div>
    </div>

    <div class="row" id="accountsRow"></div>
    <div class="row mt-2">
        <div class="col-12 text-end">
            <a href="/Account/Index" id="allAccountsBtn" class="btn btn-primary px-4 rounded-3" style="background:#0064c9; border:none;">
                Tüm Hesaplarım (0)
            </a>
        </div>
    </div>
</div>

@section Scripts {
    <script>
   
        const API_BASE = window.API_BASE_URL;
        const token = sessionStorage.getItem('token');
        if (!token) window.location.href = "/Login/Index";

 
        function parseJwt(token) {
            try {
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
                return JSON.parse(jsonPayload);
            } catch (err) {
                console.error("JWT parse hatası:", err);
                return {};
            }
        }

        document.addEventListener("DOMContentLoaded", loadDashboard);

        async function loadDashboard() {
            const jwt = parseJwt(token);
            const customerId = jwt.nameid || jwt.sub || jwt.id || jwt.customerId;
            console.log("Çözülen müşteri id:", customerId);

            let userName = "...";
            if (customerId) {
                try {
                    const userResp = await fetch(`${API_BASE}/api/customer/${customerId}`, {
                        headers: { 'Authorization': 'Bearer ' + token }
                    });
                    if (userResp.ok) {
                        const user = await userResp.json();
                        userName = user.fullName || user.FullName || user.name || user.Name || "...";
                    } else {
                        console.warn("Kullanıcı bilgisi alınamadı:", await userResp.text());
                    }
                } catch (err) {
                    console.error("Kullanıcı fetch hatası:", err);
                }
            }

            const welcomeElem = document.getElementById('welcomeName');
            if (welcomeElem)
                welcomeElem.innerText = userName;
            else
                console.warn("'welcomeName' elementi bulunamadı!");

            let accounts = [];
            if (customerId) {
                try {
                    const resp = await fetch(`${API_BASE}/api/account/customer/${customerId}`, {
                        headers: { 'Authorization': 'Bearer ' + token }
                    });
                    if (resp.ok) {
                        accounts = await resp.json();
                    } else {
                        console.warn("Hesaplar alınamadı:", await resp.text());
                    }
                } catch (err) {
                    console.error("Hesaplar fetch hatası:", err);
                }
            }

            const row = document.getElementById('accountsRow');
            const allAccountsBtn = document.getElementById('allAccountsBtn');
            if (!row)
                console.error("'accountsRow' elementi bulunamadı!");
            if (!allAccountsBtn)
                console.error("'allAccountsBtn' elementi bulunamadı!");

            if (!row || !allAccountsBtn) return;

            if (!accounts || accounts.length === 0) {
                row.innerHTML = `<div class="col-12">
                    <div class="alert alert-info">Hiç hesabın bulunmuyor.</div>
                </div>`;
                allAccountsBtn.innerText = `Tüm Hesaplarım (0)`;
                return;
            }

            allAccountsBtn.innerText = `Tüm Hesaplarım (${accounts.length})`;

            row.innerHTML = accounts.slice(0, 2).map(h => `
                <div class="col-md-6 mb-3">
                    <a href="/Account/Details/${h.id ?? h.Id}" style="text-decoration:none;">
                        <div class="card shadow rounded-4 border-0 hover-shadow" style="transition:box-shadow .3s;">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5 class="card-title mb-0" style="color:#0064c9;">${h.iban ?? h.IBAN}</h5>
                                        <span class="fw-light fs-6" style="color:#888;">
                                            ${h.currency ?? h.Currency}
                                        </span>
                                    </div>
                                    <div class="fs-4 fw-bold" style="color:#003366;">
                                        ${h.balance ?? h.Balance} ₺
                                    </div>
                                </div>
                                <div class="mt-2 text-secondary">
                                    <span>Hesap No: ${h.id ?? h.Id}</span>
                                </div>
                            </div>
                        </div>
                    </a>
                </div>
            `).join("");
        }
    </script>
}
